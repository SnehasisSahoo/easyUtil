{"ast":null,"code":"var _jsxFileName = \"/Users/snehasis/Documents/MYF/react/easy-util/src/components/TempConverter.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport NavBar from \"./NavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TempConverter() {\n  _s();\n  //   const cInp = (temp) => {\n  //     if (isNaN(parseInt(temp.target.value))) {\n  //       temp.target.value = null;\n  //     }\n  //     setTempc(temp.target.value);\n  //     setButc(true);\n  //     setButf(false);\n  //     // temp.target.value = tempc;\n  //   };\n  const cInp = temp => {\n    if (isNaN(parseInt(temp.target.value))) {\n      temp.target.value = null;\n    }\n    setTempc(temp.target.value);\n    setTempf(temp.target.value * 9 / 5 + 32);\n    // temp.target.value = tempc;\n  };\n\n  //   const fInp = (temp) => {\n  //     if (isNaN(parseInt(temp.target.value))) {\n  //       temp.target.value = null;\n  //     }\n  //     setTempf(temp.target.value);\n  //     setButf(true);\n  //     setButc(false);\n  //     // temp.target.value = tempf;\n  //   };\n  const fInp = temp => {\n    if (isNaN(parseInt(temp.target.value))) {\n      temp.target.value = null;\n    }\n    console.log(temp.target.value);\n    setTempf(temp.target.value);\n    setTempc((temp.target.value - 32) * 5 / 9);\n    // temp.target.value = tempf;\n  };\n\n  // const conv = ()=>{\n  //     setTempf((tempcin*9/5)+32);\n  //     setTempc((tempfin-32)*5/9);\n  //     console.log(tempc);\n  //     console.log(tempf);\n  //     console.log(cInp.value);\n\n  //   const convToC = () => {\n  //     setTempc(((tempf - 32) * 5) / 9);\n  //   };\n\n  //   const convToF = () => {\n  //     setTempf((tempc * 9) / 5 + 32);\n  //   };\n\n  // };\n\n  //(0°C × 9/5) + 32 = 32°F\n  //(0°F − 32) × 5/9 = -17.78°C\n\n  const [tempc, setTempc] = useState('');\n  const [tempf, setTempf] = useState('');\n\n  //   const [butc, setButc] = useState(false);\n  //   const [butf, setButf] = useState(false);\n  // const [tempcin, setTempcin] = useState(0);\n  // const [tempfin, setTempfin] = useState(32);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      tab: \"temp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center-alng\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"TEMPERATURE CONVERSION\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"tempForm\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            type: \"text\",\n            inputMode: \"numeric\",\n            name: \"tempc\",\n            value: tempc,\n            id: \"tempc\",\n            onChange: cInp,\n            placeholder: \"temperature in degree centigrate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"tempc\",\n                children: \" \\xB0 C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"tempForm\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            type: \"text\",\n            name: \"tempf\",\n            value: tempf,\n            id: \"tempf\",\n            onChange: fInp,\n            placeholder: \"temperature in degree centigrate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"tempf\",\n                children: \" \\xB0 F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(TempConverter, \"EfA0yQPWrs+O0SfsWI/VlN1aEVM=\");\n_c = TempConverter;\nvar _c;\n$RefreshReg$(_c, \"TempConverter\");","map":{"version":3,"names":["React","useState","NavBar","TempConverter","cInp","temp","isNaN","parseInt","target","value","setTempc","setTempf","fInp","console","log","tempc","tempf"],"sources":["/Users/snehasis/Documents/MYF/react/easy-util/src/components/TempConverter.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport NavBar from \"./NavBar\";\n\n\nexport default function TempConverter() {\n//   const cInp = (temp) => {\n//     if (isNaN(parseInt(temp.target.value))) {\n//       temp.target.value = null;\n//     }\n//     setTempc(temp.target.value);\n//     setButc(true);\n//     setButf(false);\n//     // temp.target.value = tempc;\n//   };\n  const cInp = (temp) => {\n    if (isNaN(parseInt(temp.target.value))) {\n      temp.target.value = null;\n    }\n    setTempc(temp.target.value);\n    setTempf((temp.target.value * 9) / 5 + 32);\n    // temp.target.value = tempc;\n  };\n\n//   const fInp = (temp) => {\n//     if (isNaN(parseInt(temp.target.value))) {\n//       temp.target.value = null;\n//     }\n//     setTempf(temp.target.value);\n//     setButf(true);\n//     setButc(false);\n//     // temp.target.value = tempf;\n//   };\n  const fInp = (temp) => {\n    if (isNaN(parseInt(temp.target.value))) {\n      temp.target.value = null;\n    }\n    console.log(temp.target.value)\n    setTempf(temp.target.value);\n    setTempc(((temp.target.value - 32) * 5) / 9);\n    // temp.target.value = tempf;\n  };\n\n  // const conv = ()=>{\n  //     setTempf((tempcin*9/5)+32);\n  //     setTempc((tempfin-32)*5/9);\n  //     console.log(tempc);\n  //     console.log(tempf);\n  //     console.log(cInp.value);\n\n//   const convToC = () => {\n//     setTempc(((tempf - 32) * 5) / 9);\n//   };\n\n//   const convToF = () => {\n//     setTempf((tempc * 9) / 5 + 32);\n//   };\n\n  // };\n\n  //(0°C × 9/5) + 32 = 32°F\n  //(0°F − 32) × 5/9 = -17.78°C\n\n  const [tempc, setTempc] = useState('');\n  const [tempf, setTempf] = useState('');\n\n//   const [butc, setButc] = useState(false);\n//   const [butf, setButf] = useState(false);\n  // const [tempcin, setTempcin] = useState(0);\n  // const [tempfin, setTempfin] = useState(32);\n\n  return (\n    <>\n      <NavBar tab=\"temp\"/>\n      <div className=\"center-alng\">\n        <h2>TEMPERATURE CONVERSION</h2>\n\n        <form className=\"tempForm\">\n          <div>\n            <input\n              className=\"input\"\n              type=\"text\"\n              inputMode=\"numeric\"\n              name=\"tempc\"\n              value={tempc}\n              id=\"tempc\"\n              onChange={cInp}\n              placeholder=\"temperature in degree centigrate\"\n            />\n            <span>\n              <b>\n                <label htmlFor=\"tempc\"> &#176; C</label>\n              </b>\n            </span>\n          </div>\n        </form>\n        {/* <div>\n          <button className=\"buttont\" onClick={convToF} disabled={butf}>\n            <b> CONVERT to °F &darr; </b>\n          </button>\n          <button className=\"buttont\" onClick={convToC} disabled={butc}>\n            <b> CONVERT to °C &uarr; </b>\n          </button>\n        </div> */}\n        <form className=\"tempForm\">\n          <div>\n            <input\n              className=\"input\"\n              type=\"text\"\n              name=\"tempf\"\n              value={tempf}\n              id=\"tempf\"\n              onChange={fInp}\n              placeholder=\"temperature in degree centigrate\"\n            />\n            <span>\n              <b>\n                <label htmlFor=\"tempf\"> &#176; F</label>\n              </b>\n            </span>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}